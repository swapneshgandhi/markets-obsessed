# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
#application.secret = "edab87ygUsQsd3w3IPISElBrfy<XWdTWukRwJK8KKc3rFG>Cn;nnaX:N/=R1<"

# The application languages
# ~~~~~
application.langs = "en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Defaults to Global in the root package.
# application.global=my.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = DEBUG

# Logger used by the framework:
logger.play = DEBUG

# Logger provided to your application:
logger.application = DEBUG

# Uncomment this for the most verbose Akka debugging:
#akka {
#    loglevel = "DEBUG"
#    actor {
#        debug {
#            receive = on
#            autoreceive = on
#            lifecycle = on
#        }
#    }
#}

tickers =
  [
    {
      id: "SPX500",
      ticker: "SPX",
      twitterQuery: "$SPX OR $SPY",
      source: "google",
      type: "riskOn"
    },
    {
      id: "VIX",
      ticker: "VIX",
      twitterQuery: "$VIX OR $VXX",
      source: "google",
      type: "riskOff"
    },
    {
      id: "EEM",
      ticker: "EEM",
      twitterQuery: "$EEM",
      source: "google",
      type: "riskOn"
    },
    {
      id: "TNX",
      ticker: "TNX",
      twitterQuery: "$TLT OR Treasury Bonds",
      source: "google",
      type: "riskOff"
    },
    {
      id: "WTI",
      ticker: "CL",
      twitterQuery: "$USO OR $CL_F OR Crude Oil",
      source: "yahooFutures",
      historical: "CHRIS/CME_CL1",
      type: "riskOn"
    },
    {
      id: "DXY",
      ticker: "DX-Y.NYB",
      futuresContracts: ""
      twitterQuery: "$USO OR $DXY OR Dollar Index",
      source: "yahoo",
      historical: "CHRIS/ICE_DX1",
      type: "riskOn"
    },
    {
      id: "EURUSD",
      ticker: "EURUSD=X",
      twitterQuery: "$EURUSD OR EURO OR $FXE",
      source: "yahoo",
      historical: "CHRIS/CME_EC1",
      type: "riskOff"
    },
    {
      id: "GOLD",
      ticker: "XAUUSD=X",
      twitterQuery: "$GLD OR $XAUUSD OR GOLD",
      source: "yahoo",
      historical: "CHRIS/CME_GC1",
      type: "riskOn"
    }
  ]

cassandra{
  host: "127.0.0.1",
  port: "9160"
}

sentiment.url = "http://text-processing.com/api/sentiment/"
tweet.url = "http://twitter-search-proxy.herokuapp.com/search/tweets?q=%%24%s"